# set up a new class for model objects and data
methods::setClass("appData", slots = list(data = "data.frame", model = "lm", pred="character",modx="character"))

# make the lm model with an interaction
fitiris <- lm(Petal.Length ~ Petal.Width * Species, data = iris)

#' make data for the app
#' @param data the dataframe that the model is generated from
#' @param model the lm model object (limited to lm for this example)
#' @param pred The name of the predictor variable involved in the interaction.
#' @param modx The name of the moderator variable involved in the interaction. 
#' @return an S4 class object with both model and data together (use slots to call each e.g. 'appdata@model')
#' @export
#'
#' @examples
#' appdata <- makeAppData(data = iris, model = fitiris, pred=Petal.width, modx=Species)
makeAppData <- function(data = data, model = model, pred=pred, modx=modx) {
  appdata <- new("appData",
    data = data,
    model = model,
    pred=pred,
    modx=modx
  )
}

# Make the appdata object from the dataframe (iris) and the model (fitiris)

appdata<-makeAppData(data = iris, model = fitiris, pred="Petal.Width", modx="Species")



## The user would then call the shiny App using a function (e.g. generate_InterEco(appdata= appdata,...))
generate_InterEco<-function(appData){
library(shiny)

# Interact module ----
Interact_ui <- function(id) {
  fluidRow(
    plot_ui(NS(id, "Interact"))
  )
}

Interact_server <- function(id, df, vbl, threshhold) {
  moduleServer(id, function(input, output, session) {
    plot_server("Interact", df, vbl, threshhold)
  })
}

plot_ui <- function(id) {
  fluidRow(
    column(11, plotOutput(NS(id, "plot"))),
    column(1, downloadButton(NS(id, "dnld"), label = ""))
  )
}

plot_server <- function(id, df, vbl, threshhold = NULL) {
  moduleServer(id, function(input, output, session) {
    plot <- reactive({
      interaction_plot(model = appdata@model, pred = appdata@pred, modx = appdata@modx)
    })
    output$plot <- renderPlot({
      plot()
    })
    output$dnld <- downloadHandler(
      filename = function() {
        paste0(vbl, ".png")
      },
      content = function(file) {
        ggsave(file, plot())
      }
    )
  })
}

interaction_plot <- function(model, pred, modx) {
  interactions::interact_plot({{ model }}, pred =!!pred,
                              modx =!!modx, plot.points = TRUE)
}


Interact_demo <- function() {
  ui <- fluidPage(Interact_ui("x"))
  server <- function(input, output, session) {
    Interact_server("x", appdata, "interact", 15)
  }
  shinyApp(ui, server)
}


### run the demo

Interact_demo()
}

generate_InterEco(appData = appdata)
